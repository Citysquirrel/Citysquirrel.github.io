{"version":3,"file":"static/js/817.04c73993.chunk.js","mappings":"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","sources":["functions/index.tsx","lib/StyleForMarkdown.tsx","pages/Home.tsx"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { Octokit } from 'octokit';\r\nimport { FaRegCopy } from 'react-icons/fa';\r\nimport styled from 'styled-components';\r\n\r\nexport function useFadeIn() {\r\n  useEffect(() => {\r\n    console.log(123);\r\n  }, []);\r\n}\r\n\r\n/**\r\n * 받은 색상이 밝은색이면 true를 반환합니다.\r\n * @param color 16진수 색상코드 (ex: `#c4e0fa`)\r\n * @returns `boolean` (ex: `true`)\r\n */\r\nexport function isLightColorTone(color: string) {\r\n  let code = '';\r\n  if (color[0] === '#') code = color.slice(1);\r\n  else code = color.slice();\r\n  const firstLetter = parseInt(color[1], 16);\r\n  const red = code.slice(1, 2);\r\n  const green = code.slice(3, 4);\r\n  const blue = code.slice(5, 6);\r\n  //! R, G, B에 따라서 나눌 필요가 있음. 현재는 임시방편\r\n  // 0 1 2 3 4 5 6 7 => dark tone\r\n  // 8 9 A B C D E F => light tone\r\n  return firstLetter > 8;\r\n}\r\n\r\n/**\r\n * 전체 화면 테두리를 주어진 두께와 배경색으로 변경합니다. 적용된 컴포넌트가 Unmount될 때 기본값(`2px`, `soft-blue-100`)으로 되돌립니다.\r\n * @param options 각 Element 별 크기 속성을 담은 옵션\r\n * @param color 변경될 배경색\r\n */\r\nexport function useScreenBorder(\r\n  options: {\r\n    top: string;\r\n    right: string;\r\n    bottom: string;\r\n    left: string;\r\n    container: string;\r\n  },\r\n  color: string = '#c4e0fa'\r\n) {\r\n  useEffect(() => {\r\n    const top = document.getElementById('top');\r\n    const right = document.getElementById('right');\r\n    const bottom = document.getElementById('bottom');\r\n    const left = document.getElementById('left');\r\n    const container = document.getElementById('container');\r\n    const footer = document.getElementById('footer');\r\n    const footerCopyright = document.getElementById('footer-copyright');\r\n    if (top !== null) {\r\n      top.style.height = options.top;\r\n      top.style.backgroundColor = color;\r\n    }\r\n    if (right !== null) {\r\n      right.style.width = options.right;\r\n      right.style.backgroundColor = color;\r\n    }\r\n    if (bottom !== null) {\r\n      bottom.style.height = options.bottom;\r\n      bottom.style.backgroundColor = color;\r\n    }\r\n    if (left !== null) {\r\n      left.style.width = options.left;\r\n      left.style.backgroundColor = color;\r\n    }\r\n    if (container !== null) {\r\n      container.style.borderWidth = options.container;\r\n    }\r\n    if (footer !== null) {\r\n      footer.style.backgroundColor = color;\r\n    }\r\n    if (footerCopyright !== null) {\r\n      const isLight = isLightColorTone(color);\r\n      const colorValue = isLight ? '#424242' : '#eee';\r\n      footerCopyright.style.color = colorValue;\r\n    }\r\n    return () => {\r\n      if (top !== null) {\r\n        top.style.height = '2px';\r\n        top.style.backgroundColor = '#c4e0fa';\r\n      }\r\n      if (right !== null) {\r\n        right.style.width = '2px';\r\n        right.style.backgroundColor = '#c4e0fa';\r\n      }\r\n      if (bottom !== null) {\r\n        bottom.style.height = '2px';\r\n        bottom.style.backgroundColor = '#c4e0fa';\r\n      }\r\n      if (left !== null) {\r\n        left.style.width = '2px';\r\n        left.style.backgroundColor = '#c4e0fa';\r\n      }\r\n      if (container !== null) {\r\n        container.style.borderWidth = '2px';\r\n      }\r\n      if (footer !== null) {\r\n        footer.style.backgroundColor = '#c4e0fa';\r\n      }\r\n      if (footerCopyright !== null) {\r\n        footerCopyright.style.color = '#424242';\r\n      }\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n}\r\n\r\n/**\r\n * body 태그에 stop-scrolling 클래스를 부여합니다.\r\n */\r\nexport function useStopBodyScroll() {\r\n  useEffect(() => {\r\n    document.body.classList.add('stop-scrolling');\r\n    return () => {\r\n      document.body.classList.remove('stop-scrolling');\r\n    };\r\n  }, []);\r\n}\r\n\r\n/**\r\n * body 태그에 주어진 color를 배경색으로 지정합니다. 언마운트될 경우 #fff로 설정합니다.\r\n * @param color 색상코드\r\n * @returns nothing\r\n */\r\nexport function useBodyColor(color: String) {\r\n  useEffect(() => {\r\n    document.body.style.transition = 'background-color 0.5s';\r\n    document.body.style.backgroundColor = `${color}`;\r\n    return () => {\r\n      document.body.style.backgroundColor = '#fff';\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n}\r\n\r\n/**\r\n * Octokit 클라이언트 셋업입니다. Public 권한으로 실행되는 octokit입니다.\r\n */\r\nexport const octokitForBlog = new Octokit({\r\n  auth:\r\n    // process.env.REACT_APP_PERSONAL_TOKEN\r\n    // process.env.GITHUB_TOKEN,\r\n    '',\r\n});\r\n\r\n/**\r\n * 본 레포의 issues 탭 정보를 받아옵니다.\r\n * @returns issues 탭 정보를 담은 Promise 객체\r\n */\r\nexport function getIssues() {\r\n  return octokitForBlog.request('GET /repos/{owner}/{repo}/issues', {\r\n    owner: 'Citysquirrel',\r\n    repo: 'citysquirrel.github.io',\r\n  });\r\n}\r\n\r\n/**\r\n * 깃허브 OAuth 인증을 수행합니다(Redirect).\r\n * {@link https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps}\r\n */\r\nexport function execGithubLogin() {\r\n  window.location.assign(\r\n    'https://github.com/login/oauth/authorize?client_id=dbbd22f1eae2c8421188'\r\n  );\r\n}\r\n\r\n/**\r\n * 액세스 토큰을 사용해 Github 유저 인증을 실행합니다.\r\n * {@link https://docs.github.com/en/rest/users/users#get-the-authenticated-user}\r\n */\r\nexport function getUserInfo() {\r\n  const octokit = new Octokit({\r\n    auth: 'YOUR-TOKEN',\r\n  });\r\n  octokit.request('GET /user', {});\r\n  //Authorization: Bearer OAUTH-TOKEN\r\n  // axios.get(\"https://api.github.com/user\",{headers: {authorization:`Bearer ${token}` }})\r\n}\r\n\r\n/**\r\n * 마크다운 형식 문자열을 HTML 형식 문자열로 바꿔줍니다.\r\n * @param text 마크다운 형식의 문자열\r\n * @returns HTML 형식의 문자열을 담은 Promise\r\n */\r\nexport async function renderMarkdown(text: string) {\r\n  return await octokitForBlog.request('POST /markdown', { text });\r\n}\r\n\r\n/**\r\n * datetime을 문자열로 받아 로컬시간과 작성시점으로부터의 시간차를 한글 형태로 바꿔줍니다.\r\n * @param datetime `string` datetime 형식의 문자열\r\n * @returns `{ kr: 한글형태의 로컬시간, alias: 작성시점으로부터의 시간차 }`\r\n */\r\nexport const modifyDatetime = (datetime: string | undefined) => {\r\n  // datetime: UTC 시간\r\n  if (datetime === undefined) return { kr: undefined, alias: undefined };\r\n  const received = new Date(datetime);\r\n  const now = new Date();\r\n  const nowYear = now.getFullYear();\r\n  const nowMonth = now.getMonth();\r\n  const nowDay = now.getDate();\r\n  const nowHour = now.getHours();\r\n  const nowMin = now.getMinutes();\r\n\r\n  // 몇분전, 몇시간전, 몇일전, 몇달전, 몇년전\r\n  // 1분 한시간 하루 한달 일년\r\n  const aMinuteAgo = new Date(nowYear, nowMonth, nowDay, nowHour, nowMin - 1);\r\n  const aHourAgo = new Date(nowYear, nowMonth, nowDay, nowHour - 1, nowMin);\r\n  const aDayAgo = new Date(nowYear, nowMonth, nowDay - 1, nowHour, nowMin);\r\n  const aMonthAgo = new Date(nowYear, nowMonth - 1, nowDay, nowHour, nowMin);\r\n  const aYearAgo = new Date(nowYear - 1, nowMonth, nowDay, nowHour, nowMin);\r\n  const difference = now.getTime() - received.getTime();\r\n  let alias;\r\n  if (aMinuteAgo <= received) {\r\n    alias = '방금 전';\r\n  } else if (aHourAgo <= received) {\r\n    alias = `${Math.ceil(difference / 1000 / 60)}분 전`;\r\n  } else if (aDayAgo <= received) {\r\n    alias = `${Math.ceil(difference / 1000 / 60 / 60)}시간 전`;\r\n  } else if (aMonthAgo <= received) {\r\n    alias = `${Math.ceil(difference / 1000 / 60 / 60 / 24)}일 전`;\r\n  } else if (aYearAgo <= received) {\r\n    alias = `${Math.ceil(difference / 1000 / 60 / 60 / 24 / 30)}개월 전`;\r\n  } else {\r\n    alias = `${Math.ceil(difference / 1000 / 60 / 60 / 24 / 30 / 12)}년 전`;\r\n  }\r\n  return { kr: received.toLocaleString('KR'), alias };\r\n};\r\n\r\n/**\r\n * 임의의 변수를 받아 해당 변수가 변화했을 때 변수를 console.log로 찍어줍니다.\r\n * @param state 임의의 변수\r\n * @returns 변수의 이전 상태\r\n */\r\nexport function useConsole(state: any, name = 'console') {\r\n  useEffect(() => {\r\n    console.log(`${name}: `, state);\r\n    // eslint-disable-next-line\r\n  }, [state]);\r\n  return state;\r\n}\r\n\r\ninterface IQueryObject {\r\n  [key: string]: string;\r\n}\r\n\r\n/**\r\n * 쿼리스트링을 받아 키-값 객체 형태로 변환합니다.\r\n * @param str `QueryString`\r\n * @returns `key-value Object`\r\n */\r\nexport function modQueryString(str: string | undefined) {\r\n  const decoded = typeof str === 'string' ? decodeURI(str) : '';\r\n  const array = decoded\r\n    .slice(1)\r\n    .split('&')\r\n    .map((query) => query.split('='));\r\n\r\n  const object = array.reduce<IQueryObject>((t, [k, v], i) => {\r\n    t[k] = v;\r\n    return t;\r\n  }, {});\r\n\r\n  return object;\r\n}\r\n\r\n/**\r\n * 실행한 컴포넌트가 존재하는 스크린에서, 모든 체크박스를 찾아 라벨을 추가해줍니다.\r\n * @param def 의존성 배열\r\n */\r\nexport const useLabelAllCheckbox = (def: any = null) => {\r\n  useEffect(() => {\r\n    const inputs = document.querySelectorAll('input');\r\n\r\n    inputs.forEach((input, index) => {\r\n      input.setAttribute('id', `check${index}`);\r\n      const label = document.createElement('label');\r\n      label.setAttribute('for', `check${index}`);\r\n      input.insertAdjacentElement('afterend', label);\r\n    });\r\n  }, [def]);\r\n};\r\n\r\nexport const useCopyAllCodeblock = (def: any = null) => {\r\n  const Button = styled.button``;\r\n  useEffect(() => {\r\n    document.querySelectorAll('pre').forEach((pre) => {\r\n      const code = pre.childNodes[0];\r\n      const handleClick = (e: React.MouseEvent) => {\r\n        navigator.clipboard.writeText(code.textContent!);\r\n      };\r\n      const jsx = (\r\n        <Button onClick={handleClick}>\r\n          <FaRegCopy />\r\n        </Button>\r\n      );\r\n    });\r\n    // eslint-disable-next-line\r\n  }, [def]);\r\n};\r\n","export const styleForMarkdown = `\r\n  text-align: justify;\r\n  \r\n  a {\r\n    color: var(--soft-blue-600);\r\n    :hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n\r\n  p {\r\n    > code {\r\n      background-color: var(--gray-300);\r\n      padding: 2px 6px;\r\n      border-radius: 4px;\r\n    }\r\n  }\r\n\r\n  pre {\r\n    display: flex;\r\n    width: 100%;\r\n    > code {\r\n      flex: auto;\r\n      overflow-x: auto;\r\n      padding: 4px;\r\n      ::-webkit-scrollbar {\r\n        display: block;\r\n        height: 8px;\r\n      }\r\n      ::-webkit-scrollbar-thumb {\r\n        \r\n        background-color: var(--soft-blue-400);\r\n        border-radius: 4px;\r\n      }\r\n    }\r\n  }\r\n\r\n  li::marker {\r\n    color: var(--soft-blue-800);\r\n  }\r\n\r\n  li > p {\r\n    margin: 0;\r\n  }\r\n\r\n  input[type=\"checkbox\"] {\r\n    display: none;\r\n  }\r\n\r\n  input[type=\"checkbox\"] + label {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 1em;\r\n    height: 1em;\r\n    margin-right: 4px;\r\n    border: 1px solid var(--gray-800);\r\n    border-radius: 4px;\r\n    transform: translateY(2px);\r\n    cursor: pointer;\r\n    :hover {\r\n        box-shadow: 0 0 2px 1px var(--gray-500);\r\n    }\r\n  }\r\n\r\n  input[type=\"checkbox\"]:checked + label::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    background-color: var(--soft-blue-500);\r\n    width: 0.8em;\r\n    height: 0.8em;\r\n    border-radius: 3px;\r\n  }\r\n\r\n  h1,\r\n  h2 {\r\n    border-bottom: 1px solid var(--gray-400);\r\n  }\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4 {\r\n    margin: 24px 0 16px;\r\n  }\r\n  h1 {\r\n    font-size: 2em;\r\n  }\r\n  h2 {\r\n    font-size: 1.5em;\r\n  }\r\n  h3 {\r\n    font-size: 1.25em;\r\n  }\r\n  h4 {\r\n    font-size: 1em;\r\n  }\r\n\r\n  blockquote {\r\n    margin: 0;\r\n    padding: 2px;\r\n    border-left: 3px solid var(--soft-blue-400);\r\n    background-color: var(--soft-blue-50);\r\n    \r\n    > p {\r\n      margin-left: 16px;\r\n      white-space: pre-line;\r\n    }\r\n\r\n    * {\r\n      color: var(--gray-700);\r\n    }\r\n  }\r\n\r\n}`;\r\n\r\nexport default styleForMarkdown;\r\n","import axios from \"axios\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useBodyColor, useLabelAllCheckbox, useScreenBorder } from \"../functions\";\r\nimport styleForMarkdown from \"../lib/StyleForMarkdown\";\r\nimport note from \"../markdown/Note.md\";\r\n\r\nconst Container = styled.main`\r\n\tmargin-top: 60px;\r\n\tmargin-bottom: 60px;\r\n\tfont-size: 18px;\r\n\tanimation: 0.5s 0.45s fadeIn;\r\n\tanimation-fill-mode: both;\r\n\tmin-height: calc(100vh - 64px - 48px);\r\n\r\n\t${styleForMarkdown}\r\n`;\r\n\r\nconst url = \"https://raw.githubusercontent.com/Citysquirrel/citysquirrel.github.io/main/src/markdown/About.md\";\r\n\r\nexport default function Home() {\r\n\tconst [body, setBody] = useState(\"\");\r\n\tuseBodyColor(\"#fdfdfd\");\r\n\tuseScreenBorder(\r\n\t\t{\r\n\t\t\ttop: \"4px\",\r\n\t\t\tright: \"4px\",\r\n\t\t\tbottom: \"4px\",\r\n\t\t\tleft: \"4px\",\r\n\t\t\tcontainer: \"4px\",\r\n\t\t},\r\n\t\t\"#6caaef\"\r\n\t);\r\n\tuseLabelAllCheckbox(body);\r\n\tuseEffect(() => {\r\n\t\tfetch(url, {}) // CORB blocked with MIME type text/plain!\r\n\t\t\t.then((res) => res.text())\r\n\t\t\t.then((text) => setBody(text));\r\n\t}, []);\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Markdown>{body}</Markdown>\r\n\t\t</Container>\r\n\t);\r\n}\r\n"],"names":["isLightColorTone","color","code","slice","firstLetter","parseInt","useScreenBorder","options","useEffect","top","document","getElementById","right","bottom","left","container","footer","footerCopyright","style","height","backgroundColor","width","borderWidth","colorValue","useBodyColor","body","transition","octokitForBlog","Octokit","auth","getIssues","request","owner","repo","modifyDatetime","datetime","undefined","kr","alias","received","Date","now","nowYear","getFullYear","nowMonth","getMonth","nowDay","getDate","nowHour","getHours","nowMin","getMinutes","aMinuteAgo","aHourAgo","aDayAgo","aMonthAgo","aYearAgo","difference","getTime","Math","ceil","toLocaleString","useConsole","state","name","console","log","modQueryString","str","decodeURI","split","map","query","reduce","t","i","k","v","useLabelAllCheckbox","def","querySelectorAll","forEach","input","index","setAttribute","label","createElement","insertAdjacentElement","Container","styled","styleForMarkdown","Home","useState","setBody","fetch","then","res","text"],"sourceRoot":""}