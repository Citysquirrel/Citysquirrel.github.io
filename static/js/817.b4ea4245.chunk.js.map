{"version":3,"file":"static/js/817.b4ea4245.chunk.js","mappings":"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","sources":["functions/index.tsx","lib/StyleForMarkdown.tsx","pages/Home.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { Octokit } from \"octokit\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport styled from \"styled-components\";\r\n\r\nexport function useFadeIn() {\r\n\tuseEffect(() => {\r\n\t\tconsole.log(123);\r\n\t}, []);\r\n}\r\n\r\n/**\r\n * 색상을 받아 해당 색상을 gray톤으로 변환해 hexcode로 리턴합니다.\r\n * @param color 6자리 hex 색상코드\r\n * @param conversion `0: 평균값(default)`, `1: Luma ITU-R BT.601`, `2: Luma ITU-R BT.709`\r\n * @returns 6자리 hex 색상코드\r\n */\r\nexport function colorApplyGrayscale(color: string, conversion: number = 0) {\r\n\t// 색상코드에 #이 존재하는지 판별 후 16진수 숫자만 추출\r\n\tconst code = color[0] === \"#\" ? color.slice(1) : color.slice();\r\n\r\n\t// rgb 각 색상들을 뽑아 10진수로 변환\r\n\tconst red = parseInt(code.slice(0, 2), 16);\r\n\tconst green = parseInt(code.slice(2, 4), 16);\r\n\tconst blue = parseInt(code.slice(4, 6), 16);\r\n\r\n\t// 각 grayscale 계산식\r\n\tconst avg = ((red + green + blue) / 3) >> 0;\r\n\tconst luma601 = (red * 0.299 + green * 0.587 + blue * 0.114) >> 0;\r\n\tconst luma709 = (red * 0.2126 + green * 0.7152 + blue * 0.0722) >> 0;\r\n\r\n\t// 비트 계산 후 hexcode로 리턴\r\n\tconst formulas = [avg, luma601, luma709];\r\n\tconst conv = formulas[conversion];\r\n\tconst gray = (conv << 16) | (conv << 8) | conv;\r\n\r\n\treturn \"#\" + gray.toString(16).padStart(6, \"0\");\r\n}\r\n\r\n/**\r\n * 색상을 받아 해당 색상을 반전시켜 hexcode로 리턴합니다.\r\n * @param color 6자리 hex 색상코드\r\n * @returns 6자리 hex 색상코드\r\n */\r\nexport function colorNegate(color: string) {\r\n\t// 색상코드에 #이 존재하는지 판별 후 16진수 숫자만 추출\r\n\tconst code = color[0] === \"#\" ? color.slice(1) : color.slice();\r\n\r\n\tconst hex = Number(\"0x\" + code); // 0xFFFFFF 형태의 16진수로변환\r\n\tconst negated = hex ^ 0xffffff; // 색상반전: XOR 기호로 비트 계산\r\n\r\n\treturn \"#\" + negated.toString(16).padStart(6, \"0\");\r\n}\r\n\r\n/**\r\n * 색상코드 받아서 해당 색상코드의 반전색에 해당하는 흑백색을 리턴합니다.\r\n * @param color 6자리 색상코드\r\n * @returns 규칙에 따라 검정색(\"#141414\") 또는 백색(\"#fcfcfc\")\r\n */\r\nfunction fontColorByContrastRule(color: string) {\r\n\tconst code = color[0] === \"#\" ? color.slice(1) : color.slice();\r\n\tconst hex = Number(\"0x\" + code);\r\n\r\n\tconst red = (hex >>> 16) & 255;\r\n\tconst green = (hex >>> 8) & 255;\r\n\tconst blue = hex & 255;\r\n\tconst yiq = (red * 299 + green * 587 + blue * 114) / 1000;\r\n\treturn yiq >= 128 ? \"#141414\" : \"#fcfcfc\";\r\n}\r\n\r\n/**\r\n * 전체 화면 테두리를 주어진 두께와 배경색으로 변경합니다. 적용된 컴포넌트가 Unmount될 때 기본값(`2px`, `soft-blue-100`)으로 되돌립니다.\r\n * @param options 각 Element 별 크기 속성을 담은 옵션\r\n * @param color 변경될 배경색\r\n */\r\nexport function useScreenBorder(\r\n\toptions: {\r\n\t\ttop: string;\r\n\t\tright: string;\r\n\t\tbottom: string;\r\n\t\tleft: string;\r\n\t\tcontainer: string;\r\n\t},\r\n\tcolor: string = \"#c4e0fa\"\r\n) {\r\n\tuseEffect(() => {\r\n\t\tconst top = document.getElementById(\"top\");\r\n\t\tconst right = document.getElementById(\"right\");\r\n\t\tconst bottom = document.getElementById(\"bottom\");\r\n\t\tconst left = document.getElementById(\"left\");\r\n\t\tconst container = document.getElementById(\"container\");\r\n\t\tconst footer = document.getElementById(\"footer\");\r\n\t\tconst footerCopyright = document.getElementById(\"footer-copyright\");\r\n\t\tconst footerEmail = document.getElementById(\"footer-email\");\r\n\t\tconst footerGithub = document.getElementById(\"footer-github\");\r\n\t\tconst contrastColor = fontColorByContrastRule(color);\r\n\t\tconst footerCopyColor = contrastColor === \"#141414\" ? \"#424242\" : \"#dadada\";\r\n\t\tif (top !== null) {\r\n\t\t\ttop.style.height = options.top;\r\n\t\t\ttop.style.backgroundColor = color;\r\n\t\t}\r\n\t\tif (right !== null) {\r\n\t\t\tright.style.width = options.right;\r\n\t\t\tright.style.backgroundColor = color;\r\n\t\t}\r\n\t\tif (bottom !== null) {\r\n\t\t\tbottom.style.height = options.bottom;\r\n\t\t\tbottom.style.backgroundColor = color;\r\n\t\t}\r\n\t\tif (left !== null) {\r\n\t\t\tleft.style.width = options.left;\r\n\t\t\tleft.style.backgroundColor = color;\r\n\t\t}\r\n\t\tif (container !== null) {\r\n\t\t\tcontainer.style.borderWidth = options.container;\r\n\t\t}\r\n\t\tif (footer !== null) {\r\n\t\t\tfooter.style.backgroundColor = color;\r\n\t\t}\r\n\t\tif (footerCopyright !== null) {\r\n\t\t\tfooterCopyright.style.color = footerCopyColor;\r\n\t\t}\r\n\t\tif (footerEmail !== null) {\r\n\t\t\tfooterEmail.style.transition = \"color 0.5s\";\r\n\t\t\tfooterEmail.style.color = contrastColor;\r\n\t\t}\r\n\t\tif (footerGithub !== null) {\r\n\t\t\tfooterGithub.style.transition = \"color 0.5s\";\r\n\t\t\tfooterGithub.style.color = contrastColor;\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tif (top !== null) {\r\n\t\t\t\ttop.style.height = \"2px\";\r\n\t\t\t\ttop.style.backgroundColor = \"#c4e0fa\";\r\n\t\t\t}\r\n\t\t\tif (right !== null) {\r\n\t\t\t\tright.style.width = \"2px\";\r\n\t\t\t\tright.style.backgroundColor = \"#c4e0fa\";\r\n\t\t\t}\r\n\t\t\tif (bottom !== null) {\r\n\t\t\t\tbottom.style.height = \"2px\";\r\n\t\t\t\tbottom.style.backgroundColor = \"#c4e0fa\";\r\n\t\t\t}\r\n\t\t\tif (left !== null) {\r\n\t\t\t\tleft.style.width = \"2px\";\r\n\t\t\t\tleft.style.backgroundColor = \"#c4e0fa\";\r\n\t\t\t}\r\n\t\t\tif (container !== null) {\r\n\t\t\t\tcontainer.style.borderWidth = \"2px\";\r\n\t\t\t}\r\n\t\t\tif (footer !== null) {\r\n\t\t\t\tfooter.style.backgroundColor = \"#c4e0fa\";\r\n\t\t\t}\r\n\t\t\tif (footerCopyright !== null) {\r\n\t\t\t\tfooterCopyright.style.color = \"#424242\";\r\n\t\t\t}\r\n\t\t\tif (footerEmail !== null) {\r\n\t\t\t\tfooterEmail.style.color = \"#141414\";\r\n\t\t\t}\r\n\t\t\tif (footerGithub !== null) {\r\n\t\t\t\tfooterGithub.style.color = \"#141414\";\r\n\t\t\t}\r\n\t\t};\r\n\t\t// eslint-disable-next-line\r\n\t}, []);\r\n}\r\n\r\n/**\r\n * body 태그에 stop-scrolling 클래스를 부여합니다.\r\n */\r\nexport function useStopBodyScroll() {\r\n\tuseEffect(() => {\r\n\t\tdocument.body.classList.add(\"stop-scrolling\");\r\n\t\treturn () => {\r\n\t\t\tdocument.body.classList.remove(\"stop-scrolling\");\r\n\t\t};\r\n\t}, []);\r\n}\r\n\r\n/**\r\n * body 태그에 주어진 color를 배경색으로 지정합니다. 언마운트될 경우 #fff로 설정합니다.\r\n * @param color 색상코드\r\n * @returns nothing\r\n */\r\nexport function useBodyColor(color: String) {\r\n\tuseEffect(() => {\r\n\t\tdocument.body.style.transition = \"background-color 0.5s\";\r\n\t\tdocument.body.style.backgroundColor = `${color}`;\r\n\t\treturn () => {\r\n\t\t\tdocument.body.style.backgroundColor = \"#fff\";\r\n\t\t};\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n}\r\n\r\n/**\r\n * Octokit 클라이언트 셋업입니다. Public 권한으로 실행되는 octokit입니다.\r\n */\r\nexport const octokitForBlog = new Octokit({\r\n\tauth:\r\n\t\t// process.env.REACT_APP_PERSONAL_TOKEN\r\n\t\t// process.env.GITHUB_TOKEN,\r\n\t\t\"\",\r\n});\r\n\r\n/**\r\n * 본 레포의 issues 탭 정보를 받아옵니다.\r\n * @returns issues 탭 정보를 담은 Promise 객체\r\n */\r\nexport function getIssues() {\r\n\treturn octokitForBlog.request(\"GET /repos/{owner}/{repo}/issues\", {\r\n\t\towner: \"Citysquirrel\",\r\n\t\trepo: \"citysquirrel.github.io\",\r\n\t});\r\n}\r\n\r\n/**\r\n * 깃허브 OAuth 인증을 수행합니다(Redirect).\r\n * {@link https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps}\r\n */\r\nexport function execGithubLogin() {\r\n\twindow.location.assign(\"https://github.com/login/oauth/authorize?client_id=dbbd22f1eae2c8421188\");\r\n}\r\n\r\n/**\r\n * 액세스 토큰을 사용해 Github 유저 인증을 실행합니다.\r\n * {@link https://docs.github.com/en/rest/users/users#get-the-authenticated-user}\r\n */\r\nexport function getUserInfo() {\r\n\tconst octokit = new Octokit({\r\n\t\tauth: \"YOUR-TOKEN\",\r\n\t});\r\n\toctokit.request(\"GET /user\", {});\r\n\t//Authorization: Bearer OAUTH-TOKEN\r\n\t// axios.get(\"https://api.github.com/user\",{headers: {authorization:`Bearer ${token}` }})\r\n}\r\n\r\n/**\r\n * 마크다운 형식 문자열을 HTML 형식 문자열로 바꿔줍니다.\r\n * @param text 마크다운 형식의 문자열\r\n * @returns HTML 형식의 문자열을 담은 Promise\r\n */\r\nexport async function renderMarkdown(text: string) {\r\n\treturn await octokitForBlog.request(\"POST /markdown\", { text });\r\n}\r\n\r\n/**\r\n * datetime을 문자열로 받아 로컬시간과 작성시점으로부터의 시간차를 한글 형태로 바꿔줍니다.\r\n * @param datetime `string` datetime 형식의 문자열\r\n * @returns `{ kr: 한글형태의 로컬시간, alias: 작성시점으로부터의 시간차 }`\r\n */\r\nexport const modifyDatetime = (datetime: string | undefined) => {\r\n\t// datetime: UTC 시간\r\n\tif (datetime === undefined) return { kr: undefined, alias: undefined };\r\n\tconst received = new Date(datetime);\r\n\tconst now = new Date();\r\n\tconst nowYear = now.getFullYear();\r\n\tconst nowMonth = now.getMonth();\r\n\tconst nowDay = now.getDate();\r\n\tconst nowHour = now.getHours();\r\n\tconst nowMin = now.getMinutes();\r\n\r\n\t// 몇분전, 몇시간전, 몇일전, 몇달전, 몇년전\r\n\t// 1분 한시간 하루 한달 일년\r\n\tconst aMinuteAgo = new Date(nowYear, nowMonth, nowDay, nowHour, nowMin - 1);\r\n\tconst aHourAgo = new Date(nowYear, nowMonth, nowDay, nowHour - 1, nowMin);\r\n\tconst aDayAgo = new Date(nowYear, nowMonth, nowDay - 1, nowHour, nowMin);\r\n\tconst aMonthAgo = new Date(nowYear, nowMonth - 1, nowDay, nowHour, nowMin);\r\n\tconst aYearAgo = new Date(nowYear - 1, nowMonth, nowDay, nowHour, nowMin);\r\n\tconst difference = now.getTime() - received.getTime();\r\n\tlet alias;\r\n\tif (aMinuteAgo <= received) {\r\n\t\talias = \"방금 전\";\r\n\t} else if (aHourAgo < received) {\r\n\t\talias = `${Math.ceil(difference / 1000 / 60)}분 전`;\r\n\t} else if (aDayAgo < received) {\r\n\t\talias = `${Math.ceil(difference / 1000 / 60 / 60)}시간 전`;\r\n\t} else if (aMonthAgo < received) {\r\n\t\talias = `${Math.ceil(difference / 1000 / 60 / 60 / 24)}일 전`;\r\n\t} else if (aYearAgo < received) {\r\n\t\talias = `${Math.ceil(difference / 1000 / 60 / 60 / 24 / 30)}개월 전`;\r\n\t} else {\r\n\t\talias = `${Math.ceil(difference / 1000 / 60 / 60 / 24 / 30 / 12)}년 전`;\r\n\t}\r\n\treturn { kr: received.toLocaleString(\"KR\"), alias };\r\n};\r\n\r\n/**\r\n * 임의의 변수를 받아 해당 변수가 변화했을 때 변수를 console.log로 찍어줍니다.\r\n * @param state 임의의 변수\r\n * @returns 변수의 이전 상태\r\n */\r\nexport function useConsole(state: any, name: string | undefined = \"console\") {\r\n\tconst text = `${state}`;\r\n\tconst methods = [console.log(state), console.count(state)];\r\n\tuseEffect(() => {\r\n\t\tconsole.log(`${name}: `, state);\r\n\t\t// eslint-disable-next-line\r\n\t}, [state]);\r\n\treturn state;\r\n}\r\n\r\ninterface IQueryObject {\r\n\t[key: string]: string;\r\n}\r\n\r\n/**\r\n * 쿼리스트링을 받아 키-값 객체 형태로 변환합니다.\r\n * @param str `QueryString`\r\n * @returns `key-value Object`\r\n */\r\nexport function modQueryString(str: string | undefined) {\r\n\tconst decoded = typeof str === \"string\" ? decodeURI(str) : \"\";\r\n\tconst array = decoded\r\n\t\t.slice(1)\r\n\t\t.split(\"&\")\r\n\t\t.map((query) => query.split(\"=\"));\r\n\r\n\tconst object = array.reduce<IQueryObject>((t, [k, v], i) => {\r\n\t\tt[k] = v;\r\n\t\treturn t;\r\n\t}, {});\r\n\r\n\treturn object;\r\n}\r\n\r\n/**\r\n * 실행한 컴포넌트가 존재하는 스크린에서, 모든 체크박스를 찾아 라벨을 추가해줍니다.\r\n * @param def 의존성 배열\r\n */\r\nexport const useLabelAllCheckbox = (def: any = null) => {\r\n\tuseEffect(() => {\r\n\t\tconst inputs = document.querySelectorAll(\"input\");\r\n\r\n\t\tinputs.forEach((input, index) => {\r\n\t\t\tinput.setAttribute(\"id\", `check${index}`);\r\n\t\t\tconst label = document.createElement(\"label\");\r\n\t\t\tlabel.setAttribute(\"for\", `check${index}`);\r\n\t\t\tinput.insertAdjacentElement(\"afterend\", label);\r\n\t\t});\r\n\t}, [def]);\r\n};\r\n\r\nexport const useCopyAllCodeblock = (def: any = null) => {\r\n\tconst Button = styled.button``;\r\n\tuseEffect(() => {\r\n\t\tdocument.querySelectorAll(\"pre\").forEach((pre) => {\r\n\t\t\tconst code = pre.childNodes[0];\r\n\t\t\tconst handleClick = (e: React.MouseEvent) => {\r\n\t\t\t\tnavigator.clipboard.writeText(code.textContent!);\r\n\t\t\t};\r\n\t\t\tconst jsx = (\r\n\t\t\t\t<Button onClick={handleClick}>\r\n\t\t\t\t\t<FaRegCopy />\r\n\t\t\t\t</Button>\r\n\t\t\t);\r\n\t\t});\r\n\t\t// eslint-disable-next-line\r\n\t}, [def]);\r\n};\r\n","export const styleForMarkdown = `\r\n  text-align: justify;\r\n  \r\n  a {\r\n    color: var(--soft-blue-600);\r\n    :hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n\r\n  p {\r\n    > code {\r\n      background-color: var(--gray-300);\r\n      padding: 2px 6px;\r\n      border-radius: 4px;\r\n    }\r\n  }\r\n\r\n  pre {\r\n    display: flex;\r\n    width: 100%;\r\n    > code {\r\n      flex: auto;\r\n      overflow-x: auto;\r\n      padding: 4px;\r\n      ::-webkit-scrollbar {\r\n        display: block;\r\n        height: 8px;\r\n      }\r\n      ::-webkit-scrollbar-thumb {\r\n        \r\n        background-color: var(--soft-blue-400);\r\n        border-radius: 4px;\r\n      }\r\n    }\r\n  }\r\n\r\n  li::marker {\r\n    color: var(--soft-blue-800);\r\n  }\r\n\r\n  li > p {\r\n    margin: 0;\r\n  }\r\n\r\n  input[type=\"checkbox\"] {\r\n    display: none;\r\n  }\r\n\r\n  input[type=\"checkbox\"] + label {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 1em;\r\n    height: 1em;\r\n    margin-right: 4px;\r\n    border: 1px solid var(--gray-800);\r\n    border-radius: 4px;\r\n    transform: translateY(2px);\r\n    cursor: pointer;\r\n    :hover {\r\n        box-shadow: 0 0 2px 1px var(--gray-500);\r\n    }\r\n  }\r\n\r\n  input[type=\"checkbox\"]:checked + label::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    background-color: var(--soft-blue-500);\r\n    width: 0.8em;\r\n    height: 0.8em;\r\n    border-radius: 3px;\r\n  }\r\n\r\n  h1,\r\n  h2 {\r\n    border-bottom: 1px solid var(--gray-400);\r\n  }\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4 {\r\n    margin: 24px 0 16px;\r\n  }\r\n  h1 {\r\n    font-size: 2em;\r\n  }\r\n  h2 {\r\n    font-size: 1.5em;\r\n  }\r\n  h3 {\r\n    font-size: 1.25em;\r\n  }\r\n  h4 {\r\n    font-size: 1em;\r\n  }\r\n\r\n  blockquote {\r\n    margin: 0;\r\n    padding: 2px;\r\n    border-left: 3px solid var(--soft-blue-400);\r\n    background-color: var(--soft-blue-50);\r\n    \r\n    > p {\r\n      margin-left: 16px;\r\n      white-space: pre-line;\r\n    }\r\n\r\n    * {\r\n      color: var(--gray-700);\r\n    }\r\n  }\r\n\r\n}`;\r\n\r\nexport default styleForMarkdown;\r\n","import axios from \"axios\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useBodyColor, useLabelAllCheckbox, useScreenBorder } from \"../functions\";\r\nimport styleForMarkdown from \"../lib/StyleForMarkdown\";\r\nimport note from \"../markdown/Note.md\";\r\n\r\nconst Main = styled.main`\r\n\tmargin-top: 60px;\r\n\tmargin-bottom: 60px;\r\n\tfont-size: 18px;\r\n\tanimation: 0.2s 0.45s fadeIn;\r\n\tanimation-fill-mode: both;\r\n\tmin-height: calc(100vh - 64px - 48px);\r\n\tmax-width: 1280px;\r\n\r\n\t${styleForMarkdown}\r\n`;\r\n\r\nconst url = \"https://raw.githubusercontent.com/Citysquirrel/citysquirrel.github.io/main/src/markdown/About.md\";\r\n\r\nexport default function Home() {\r\n\tconst [body, setBody] = useState(\"\");\r\n\tuseBodyColor(\"#fdfdfd\");\r\n\tuseScreenBorder(\r\n\t\t{\r\n\t\t\ttop: \"4px\",\r\n\t\t\tright: \"4px\",\r\n\t\t\tbottom: \"4px\",\r\n\t\t\tleft: \"4px\",\r\n\t\t\tcontainer: \"4px\",\r\n\t\t},\r\n\t\t\"#6caaef\"\r\n\t);\r\n\tuseLabelAllCheckbox(body);\r\n\tuseEffect(() => {\r\n\t\tfetch(url, {}) // CORB blocked with MIME type text/plain!\r\n\t\t\t.then((res) => res.text())\r\n\t\t\t.then((text) => setBody(text));\r\n\t}, []);\r\n\treturn (\r\n\t\t<Main>\r\n\t\t\t<Markdown>{body}</Markdown>\r\n\t\t</Main>\r\n\t);\r\n}\r\n"],"names":["fontColorByContrastRule","color","code","slice","hex","Number","useScreenBorder","options","useEffect","top","document","getElementById","right","bottom","left","container","footer","footerCopyright","footerEmail","footerGithub","contrastColor","footerCopyColor","style","height","backgroundColor","width","borderWidth","transition","useBodyColor","body","octokitForBlog","Octokit","auth","getIssues","request","owner","repo","modifyDatetime","datetime","undefined","kr","alias","received","Date","now","nowYear","getFullYear","nowMonth","getMonth","nowDay","getDate","nowHour","getHours","nowMin","getMinutes","aMinuteAgo","aHourAgo","aDayAgo","aMonthAgo","aYearAgo","difference","getTime","Math","ceil","toLocaleString","useConsole","state","name","console","log","count","modQueryString","str","decodeURI","split","map","query","reduce","t","i","k","v","useLabelAllCheckbox","def","querySelectorAll","forEach","input","index","setAttribute","label","createElement","insertAdjacentElement","Main","styled","styleForMarkdown","Home","useState","setBody","fetch","then","res","text"],"sourceRoot":""}